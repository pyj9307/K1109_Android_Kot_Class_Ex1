1
val 변수명 : 타입 = 값
(val : 초기에 값을 할당되면 나중에 값을 변경할 수 없으며 값을 변경하게 되면 컴파일 에러가 발생,Java에서는 final과 같다)
var 변수명 : 타입 = 값
(var : 초기화 후 값을 변경이 가능합니다. 하지만, 다른 타입의 값을 넣을 수는 없습니다.)
ex) var name = "이상용"
(*타입이 없더라도 자바스크립트에서 알아서 찾아줌, 코틀린에서는 모두 다 참조형 var)
ex2) var name : String = "이상용"

2
최상위에 선언한 변수나 클래스의 멤버 변수는 선언과 동시에 초깃값을 할당해야한다.

3
초기화 미루기
최상위에 선언한 변수나 클래스의 멤버 변수는 latenit, var만 사용, 함수 내부에서는 선언만 가능.
기초 데이터 타입은 안됨.
ex) lateinit var data1 : String

4
초기화 미루기 2
lazy 키워드
변수가 최초로 이용될 때, 실행 됨.
구현체 실행 부분 마지막에 값이 있다면, 초기값으로 할당.
ex) val data4 : Int by lazy {
println("lazy 테스트")
10
}

5
코틀린의 모든 데이터 타입은 객체다.
ex) var data1 : Int = 10
data1 = data1 + 10
data1 = data1.plus(10)

6
문자열 표기(String 타입), 삼중 따옴표 사용
ex) val str1 = "hi \n yong"
val str2 : """
		hi
		world
		"""
println("str1: $str1")
println("str2: $str2")

7
문자열 템플릿
문자열 타입의 데이터에 변수값이나, 연산식의 결괏값을 포함해서 표현할 때,
ex) val str1 = "hi \n yong"
println("str1: $str1")
${sum(10)}, ${10+10}

fun addSum(no: Int): Int {
	var sum = 0
	// 1..no = 1 <= i <= no
	for (i in 1..no){
	sum =+ i
	}
	return sum
}

val name = "yong"
println("name: $name, sum: ${addSum(10)}")

8
변수 타입, 
Any(Object): 모든 타입 가능, 
Unit(void): 리턴 타입이 없음.
ex)
var data1: Any = 10
var data2: Any = "String"
var data3: Any = User()

변수에도 사용 가능하지만, 보통 함수에 표기 많이 함.
fun some(): Unit { }
생략 가능.
fun some(): { }

9
Nothing, ?(연산자) 널허용 연산자.
변수, 함수 둘다 타입 지정이 가능함.
ex)
var data13 : Nothing? = null

10
함수 선언
fun 함수명(매개변수면 : 타입) 반환타입 {

}
주의) 매개변수 안에 키워드로 val, var 사용못함.
자동으로 val 인식.
ex) fun some (data1: Int) : Int {
	return data1 * 10
}

11
함수의 매개변수에 기본 디폴트 값 선언 가능.
ex)
fun some (data1: Int, data2: Int = 10) : Int {
	return data1 * data2
}

12
컬렉션 배열
ex) 
val 변수명: Array<타입>, Array(배열의 길이, 배열의 원소의 초깃값)
val data14: Array<Int> = Array(3,{0})
// 배열의 index 넘버 0부터 시작
data14[0] = 10
data14[1] = 10
data14.set(2,30)

println(
"""
array size : ${data14.size}
array data : ${data14[0]}, ${data14[1]}, ${data14.get(2)}
"""
)

13
컬렉션 기초 타입 배열
ex) val data15 : IntArray = IntArray(3,{0})
ex2) val data15 : BooleanArray = BooleanArray(3,{false})

과제 바탕화면에 포스트잇
집에 안드로이드 스튜디오 설치.

====================0221
14
기초 타입 arrayOf() 함수 이용
ex) val data15 = intArrayOf(10,20,30)
val data16 = booleanArrayOf(true,false)

15
가변 리스트, set, map
불변 클래스는 초기에 데이터를 대입하면 더 이상 변경할 수 없는 타입입니다.
가변 클래스는 초기에 데이터를 대입한 이후에도 데이터를 변경할 수 있습니다.
List - listOf(): 불변
List - mutableListOf(): 가변

Set - setOf(): 불변
Set - mutableSetOf(): 가변

map - mapOf(): 불변
map - mutableMapOf(): 가변

16
if 문장 표현식으로 해서 변수에 대입.
ex) var data = 10
var result = if(data>0) {
println("테스트")
true
} else {
	println("else 테스트")
	false
}

17
when 문의 조건문
ex) var data = "hi"
when (data) {
"hi" -> println("hi")
"hi2" -> println("hi2")
	else -> {
	println("data is not valid")
	}
}

18
in(범위 지정), is(타입 확인) 조건문
ex) var data: Any = "hi"
when (data) {
is String -> println("data is String")
in 1..10 -> println("data is 1..10")
	else -> {
	println("data is not valid")
	}
}

19
when 표현식으로 사용 가능
ex) var data: Any = "hi"
val result = when (data) {
is String -> println("data is String")
in 1..10 -> println("data is 1..10")
	else -> {
	println("data is not valid")
	}
	println(result)
}

20
for, while 반복문
for(i in 1..10){} -> 1부터 10까지 1씩 증가
for(i in 1 until 10){} -> 1부터 9까지 1씩 증가
for(i in 1..10 step 2){} -> 1부터 10까지 2씩 증가
for(i in 10 downTo 1){} -> 10부터 1까지 1씩 감소
ex)
var sum: Int = 0
for (i in 1..10) {
sum += i}
println(sum)

21
indices, withindex 컬렉션 타입의 데이터 개수만큼 반복
ex) var data = arrayOf<Int> (10,20,30)
for (i in data.indices) {
	print(data[i])
	if (i !== data.size -1) print(",")
	}

ex) var data = arrayOf<Int> (10,20,30)
for ((index,value) in data.withindex()) {
    print(value)
    if (index !== data.size -1) print(",")
    }

22
class 생성시
constructor
주생성자(클래스 선언부 옆에 작성)
보조생성자(클래스 본문 내부에 작성)
역할 : 클래스 객체 생성시 값 초기화하는 역할.
객체 사용시 new 키워드 사용안함
ex) class User{
var name = "lsy"
constructor(name: String){
this.name = name
}
fun someFun() {
println("name: $name")
}
}

val user = User("lsy2")
user.someFun()

23
init 키워드. 객체 생성시 init 영역안에 코드가 실행됨.
ex) class User(name: String, age:Int) {
init {
println("객체 생성 할 때마다 init 실행이 됨")
}
}

val user = User2("lsy2",30)

24
클래스의 생성자 안에 매개변수는 지역변수라서, 다른 함수에서 재사용 못함. 변수의 효력범위
그러나 예외)
1. init 키워드 본문안에서는 해당 매개변수를 그냥 사용 가능.
2. 주생성자에서 var, val로 지정하면, 다른 함수에서도 사용 가능.
클래스의 멤버 변수의 효과. 범위(Scope)
ex)class User(val: String, val age:Int) {
init {
println("init 안에서는 주생성자 매개변수 사용 가능")
}
// var, val로 지정하면, 다른 함수에서도 사용 가능.
fun someFun() {
println("name: $name")
}
}

25
주생성자와 보조생성자가 같이 있다면, 보조생성자에서 주생성자로 연결한다.
방법) 보조생성자 선언부 뒤에 : 붙여서 해당 주생성자를 호출
ex)
class User(name: String) {
	constructor(name: String, age: Int):this(name)
}

26
상속
클래스 선언부 뒤에 콜론 뒤에 부모 클래스를 작성.
주의) 코틀린에서 부모 클래스선언부 앞에 open이라는 키위드를 사용해야 상속이 가능합니다.
ex)open class Super(name: String) {
var superData = 10
fun superFun() {
println("super class $superData")
}
}

class Sub: Super{
    constructor(name: String): super(name) {
    }
}


fun main () {
    var obj = Sub2("lsy7")
    println(obj.superData)
    obj.superFun()
}
===================================
참고, 안드로이드 스튜디오에서 디버거 동작
이클립스와 동일, 줄 번호 앞에 더블 클릭해서
중단점 설정 수 디버그 모드로 실행하면 됨.
step over, step into 등의 기능으로
생성자, 메서드 등, 상속 확인 시 편함.
===================================
팁, 앱 작업 시, 실행 시점에 오류 잡을 때,
디버거 콘솔에 표시 해줌(매우 편함)

27
오버라이딩
ex)open class Super(name: String) {
	open var superData = 10
	open fun superFun() {
	println("super class $superData")
	}
}

class Sub: Super() {
	override var superData = 20
	override fun superFun() {
	println("재정의 테스트")
	}
}

fun main () {

    var obj3 = Sub3("lsy7")
    println(obj3.superData)
    obj3.superFun()
}


28
접근 제한자
기본 : public
public(모든파일), private(파일 내부), protected(사용 불가), internal(같은 모듈)
ex)open class Super(name: String) {
	var publicData = 10
	protected var protectedData = 10
	private var privateData = 10
}

class Sub: Super() {
	fun subFun() {
	publicData++
	protectedData++
	privateData++
	}
}

29
데이터 클래스, data하는 키워드를 사용
비교, 출력 시 해당 데이터를 처리한다.
(메모리 위치의 주솟값이 아님)
ex)class NonData (val name: String, val age: Int)

data class Data (val name: String, val age: Int)

30
오브젝트 클래스 : 익명 클래스를 만들 목적으로 사용
익명이므로, 선언과 동시에 할당하기.
ex)val obj = object {
	var data = 10
	fun some() {
	println("익명 클래스 테스트")
	}
}
주의) object 뒤에 타입을 지정해야함.
안하면, 디폴트 타입은 Any,
만약 사용한다면 뒤에 클래스 or 인터페이스 등을 표기하면 해당 클래스를 상속 받은 클래스를 사용 가능.
사용하려면 타입을 지정하기.
ex2)open class Super {
	open var publicData = 10
	open fun some() {
	println("익명 클래스 사용 테스트")
	}
}

val obj2 = object: Super() {
	override var publicData = 20
	override fun some() {
	println("익명 클래스 사용 테스트")
	}
}

31
컴패니언 클래스(static과 비슷)
클래스 이름으로 해당 멤버에 접근이 가능.
클래스 내부에 companion object {} 선언
중괄호 내부에 멤버는 클래스 이름으로 접근 가능.
ex)class MyClass {
	companion object {
	var data = 10
	fun some() {
		println("컴패니언 object 테스트")
		}
	}
}

32
람다식
익명 함수(화살표 함수)
{매개변수 -> 실행할 문장}
ex)
val sum = {no1:Int, no2:Int -> no1 + no2}
주의) 실행할 문장에서 마지막 값이 반환값으로 사용됨.
return 키워드를 사용 안함
람다 함수 생략시 : 매개변수 없으면, 화살표도 같이 생략.
함수 실행 부분 코드의 바깥쪽에 중괄호를 확인 하면 됩니다.

33
it
매개변수가 1개인 람다함수에 사용.
매개변수를 선언 안해도 it 키워드로 대체 가능.
ex)it 사용 전 
val sum = {no1:Int -> println(no1)}
ex2)it 사용 후 
val sum: (Int)-> Unit = {println(it)}
some(10)

34
함수 타입 : (Int)->Int
val sum: (Int)->Int = {no1:Int -> println(no1)}

35
함수 타입 별칭 사용
ex)typealias MyFunType = (Int,Int) -> Boolean
ex)val sum: MyFunType = {no1:Int, no2:Int -> no1>no2}

36
고차함수
함수의 매개변수 자리에 함수가 들어가거나 결괏값에 함수가 들어가는 경우
// 매개변수 자리에 함수가 들어감 => arg: (Int) -> Boolean
ex)fun FunTest(arg: (Int) -> Boolean):()->String {
val result = if(arg(10)){
"valid"
} else {
"invalid"
}
return{"고차함수 테스트 : $result"}
}

main에서
val result = FunTest({no -> no>0})
println(result())
}

37
널 안정성
ex)var data: String? = null
data?.length ?: 0

예외 발생시키는 연산자
data!!.length ?: 0

--------------------------230308

Activity : 뷰를 에뮬레이터에 실행시켜주는 기능

뷰의 크기 지정하는 방법
textsize : sp, 기타size : dp

AndroidManifest.xml 앱에 관한 기본적인 설정들이 들어간다.
레이아웃은 res/layout/activity_main

자동 임포트 설정
file -setting - auto import 검색

-----------------------230224
서술형 문제 오픈북


useEffect : 컴포넌트가 랜더링 될 때마다(mount, update, unmount) 특정 실행항 수 있는 Hook, 함수형 컴포넌트의 생명주기 메서드(컴포넌트가 화면에 가장 처음 렌더링 될 때 or unmount 될 때 한 번만 실행하고 싶을 때는 deps 위치에 빈 배열을 넣는다.(만약 배열을 생략한다면 리렌더링 될 때 마다 실행된다.)
특정값이 업데이트 될 때 실행하고 싶을 때는 deps 위치의 배열 안에 검사하고 싶은 값(배열)을 넣어준다.

----------------------230314 1교시 11장 제트팩 관련 메모(프래그먼트)
프래그먼트 소개
1. 텍스트 뷰나, 버튼 액티비티 화면을 구성하는 뷰.
2. 자체만으로는 화면에 출력이 되는게 없다.
3. 다른 뷰와 차이점 : 동작이 액티비티처럼 동작.
4. 액티비티에서 작성할 수 있는 모든 코드는 프래그먼트에서도 작성이 가능.

배경.
태블릿, 기존의 폰보다 화면 해상도나 크기가 큽니다.
하나의 액티비티엣 화면을 전부 다 구성하기가 매우 힘듭니다.
한 화면에 뷰 클래스를 2개를 출력해야하는데,
프래그먼트 개념을 통해서, 한 화면에 2개의 프래그먼트로 화면 구성.
왼쪽 사이드 화면, 오른쪽에 사이드 메뉴에서 선택돈 메뉴가 출력이 되는 화면.
!
모바일에서, 해당 프래그먼트를 이용해서, 리사이클러뷰, 뷰페이저의 구성품으로 사용할 예정.

결론,
하나의 액티비티에서 여러개의 프래그먼트를 사용해서 부품을 교체하듯이 사용함.

프래그먼트 사용하기 위해서 build.gradle 파일에서 구현
implementation 'androidx.fragment:fragment-ktx:1.5.5'

ktx 파일이 붙으면 코틀린 파일을 의미함.
없으면 자바 파일 버전이라고 보시면 됩니다.

프래그먼트 출력하기 위한 메모.
1. 뷰어지안 이 자체로는 화면에 출력이 되는것이 없다.
2. 먼저, 화면을 구성하는 xml를 먼저 작성.
3. 액티비티 만들면, 자동으로 xml화면이 만들어진다.
(액티비티 파일만 복사를 하면 주의, android manifast 파일에 자동 등록부분 확인)
4. Fragment 클래스 상속.
5. 최소한으로 onCreateView() 함수는 재정의해서 작성해야한다.

----------------------230314 2교시
동적으로 프래그먼트 동작.
액티비티 코드에서 프래그먼트 출력.
1. 액티비티의 레이아웃이 필요.
xml 파일에 프래그먼트가 출력될 뷰를 하나 준비.
예) 레이아웃 상관없음(GridLayout...
<Linearlayout
	android:id="@+id/fragment_content"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
	android:orienation="vertical">
</Linearlayout>

2. FragmentManager로 만든 FragmentTransaction클래스의 함수 이용
예)
val fragmentManager: FragmentManager = supportFragmentManager
val transaction: FragmentTransaction = fragmentManager.beginTransaction()
val fragment = TwoFragment() // 교체될 프래그먼트들이 온다.
// 추가
// 첫번째 매개변수는 프래그먼트가 출력될 뷰의 id 값.
transaction.add(R.id.fragment_content, fragment)
// 커밋하게 되면 해당 뷰를 그려줌
transaction.commit()

액티비티 코드에서 프래그먼트 출력

코드에서 프래그먼트를 동적으로 제어(추가, 제거 등)하려면 FragmentManager로 만든 FragmentTransaction 클래스의 함수를 이용

add(int containerViewId, Fragment fragment): 새로운 프래그먼트를 화면에 추가합니다.

replace(int containerViewId, Fragment fragment): 추가된 프래그먼트를 대체합니다.

remove(Fragment fragment): 추가된 프래그먼트를 제거합니다.

commit(): 화면에 적용합니다.

프래그먼트 생명주기

1. 액티비티 동작하는 뷰.
2. 액티비티에서 작성할 수 있는 코드는 모두 다 작성 가능.
3. 액티비티 생명주기와 같다.
4.
1번 : onCreate(),
2번 : onStart(),
3번 : onResume(),
4번 : onPause(),
5번 : onStop(),
6번 : onDestory()

5.
2번에서 함수가 호출되는 순간 해당 액티비티가 출력하는 프래그먼트의 onStart() 함수도 호출.

6.
생명주기 5단계
초기화->생성->시작->재개->소멸 하는 단계로 구분됨.


7. 각 단계에서 자동으로 호출되는 함수들
1) 초기화가 되면서, onAttach와 onCreate 함수가 호출
초기화 단계 : 프래그먼트의 화면을 구성할 뷰가 준비가 되지 않은 상태.

2) 생성단계 : 프래그먼트의 화면을 구성할 뷰를 준비.
onCreateView 함수에서 프래그먼트 화면을 구성할 뷰객체 준비.

3) 시작단계 : 프래그먼트 화면이 사용자에게 보이는 단계로

4) 재개단계 : 포커스를 가지고 사용자의 이벤트를 처리할 수 있는 단계.
데이터를 바인딩하는 단계,
예) 문자열을 준비해놓으면 해당 문자열을 바인딩

5) 소멸단계

예) 프래그먼트가 처음 화면에 나올 때 단계 변화
onAttach -> onCreate -> onCreateView -> onViewCreated -> onStart -> onResume

8.
백스택이란?
프래그먼트가 화면에 보이지 않는 순간 제거하지 않고 저장했다가 다시 이용할 수 있는 기능.
예)
사용자가 뒤로가기 버튼을 누를 때 이전 프래그먼트 화면으로 전환.

만약, 백스택 설정을 안하면, 뒤로가기 했을 때, 해당 프래그먼트가 onPause -> onStop -> onDestory 까지 호출되고 제거.

백스택을 사용하면, 프래그먼트 동작 방식.
프래그먼트가 제거되지 않고, onDestoryView 함수까지만 호출.
onPause -> onStop -> onDestoryView 함수가 자동 호출.
이후에 다시 반복됨.
onCreateView -> onViewCreated -> onStart -> onResume

백스택 설정.
transaction.addToBackStack(null)






